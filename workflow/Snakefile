import os
import sys
import pandas as pd

include: "rules/common.smk"
sample_dir=config['sample_dir']
SAMPLES = list(samples['sample'])
application_type = list(samples['application'])
sample_to_application = { SAMPLES[i] : application_type[i] for i in range(len(SAMPLES))}
base_dir = config['base_dir']

include: "rules/qc.smk"
include: "rules/align.smk"
include: "rules/filter.smk"
include: "rules/bedtools.smk"
include: "rules/transcript_assembly.smk"
include: "rules/transcript_quant.smk"
include: "rules/multiQC.smk"

#print(expand(os.path.join(base_dir,"stringtie","{sample}","{sample}.stringtie.gtf"),sample=SAMPLES))

#running Snakemake dry run with following command, remove -n to run job:
#to submit job
# ./run.sh dryrun /data/millerv2 /data/millerv2/NanoseqSnakemake/.tests for dryrun

# run the run.sh script using ./run.sh /data/millerv2 
# $1 is first argument given when submitting job, ie, the runmode, second argument is output dir, third is input file directory


#snakemake --cores 1 --use-envmodules -n --use-singularity --singularity-args '-B /data/millerv2'


rule all:
    input:
        expand(os.path.join(base_dir,"fastqc_raw","{sample}_fastqc.html"),sample=SAMPLES),
        expand(os.path.join(base_dir,"fastqc_raw","{sample}_fastqc.zip"),sample=SAMPLES),
        expand(os.path.join(base_dir,"trimmed_reads","{sample}_trimmed.fastq.gz"),sample=SAMPLES),
        os.path.join(base_dir,"Nanoplot","NanoPlot-report.html"),
        expand(os.path.join(base_dir,"fastqc_trimmed","{sample}_trimmed_fastqc.html"),sample=SAMPLES),
        expand(os.path.join(base_dir,"fastqc_trimmed","{sample}_trimmed_fastqc.zip"),sample=SAMPLES),
        expand(os.path.join(base_dir,"genome_alignments","{sample}_alignment.sam"),sample=SAMPLES),
        expand(os.path.join(base_dir,"genome_alignments","sorted_bam","{sample}.sorted.bam"),sample=SAMPLES),
        expand(os.path.join(base_dir,"genome_alignments","sorted_bam","{sample}.sorted.bam.flagstat"),sample=SAMPLES),
        expand(os.path.join(base_dir,"genome_alignments","sorted_bam","{sample}.sorted.bam.stats"),sample=SAMPLES),
        expand(os.path.join(base_dir,"bedtools","bed_files","{sample}.bed"),sample=SAMPLES),
        os.path.join(base_dir,"genomes","chrom.sizes"),
        expand(os.path.join(base_dir,"bedtools","big_bed_files","{sample}.bigBed"),sample=SAMPLES),
        expand(os.path.join(base_dir,"bedtools","bedgraph_files","{sample}.bedGraph"),sample=SAMPLES),
        expand(os.path.join(base_dir,"bedtools","bigWig_tracks","{sample}.bigWig"),sample=SAMPLES),
        expand(os.path.join(base_dir,"stringtie","assemblies","{sample}.stringtie.gtf"),sample=SAMPLES),
        os.path.join(base_dir,"stringtie","mergelist","mergelist.txt"),
        os.path.join(base_dir,"stringtie","merged","stringtie.merged.gtf"),
        expand(os.path.join(base_dir,"stringtie","assemblies","{sample}.stringtie_final.gtf"),sample=SAMPLES),
        os.path.join(base_dir,"featureCounts","counts_gene.txt"),
        os.path.join(base_dir,"featureCounts","counts_transcript.txt"),
        os.path.join(base_dir,"multiqc","multiqc_report.html")




